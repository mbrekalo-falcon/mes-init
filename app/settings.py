"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import datetime
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.redis import RedisIntegration

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECURITY_KEY", "")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', False) == 'True'

ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS').split(' ')


# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',


    # Packages
    'custom_user',
    'corsheaders',
    'django_filters',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_swagger',
    'drf_yasg',
    'sorl.thumbnail',
    'django_celery_beat',
    'django_celery_results',
    'django_countries',
    'mathfilters',
    'stdimage',
    'channels',

    # Models
    'models.cluster.apps.ClusterConfig',
    'models.device.apps.DeviceConfig',
    'models.machine.apps.MachineConfig',
    'models.common.apps.CommonConfig',
    'models.user.apps.UserConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'
AUTH_USER_MODEL = 'user.UserModel'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
"""
DATABASES = {
    "default": {
        "ENGINE": os.environ.get("ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("POSTGRES_DB", BASE_DIR + "/db.sqlite3"),
        "USER": os.environ.get("POSTGRES_USER", "user"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "password"),
        "HOST": os.environ.get("DB_HOST", "localhost"),
        "PORT": os.environ.get("DB_PORT", "5432"),
    }
}
"""
import dj_database_url

DATABASES = {
    'default': dj_database_url.config()
}
DATABASES['default']['DISABLE_SERVER_SIDE_CURSORS'] = True

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

if os.environ.get('GOOGLE_STORAGE', None):
    from google.oauth2 import service_account
    DEFAULT_FILE_STORAGE = os.environ.get('GOOGLE_STORAGE')
    GS_BUCKET_NAME = os.environ.get('GS_BUCKET_NAME')
    GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
        BASE_DIR + '/creds/tempname-354911-5351f9d0c53c.json'  # see step 3
    )
    GS_DEFAULT_ACL = 'publicRead'
    GS_QUERYSTRING_AUTH = False
    GS_IS_GZIPPED = True
    GS_FILE_OVERWRITE = False
else:
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CELERY
CELERY_REDIS_LOCATION = os.environ.get("REDIS_PATH", "redis://127.0.0.1:6379/0")
REDIS_DB = '{}'.format(os.environ.get("REDIS_DB", "1"))
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER", "redis://127.0.0.1:6379/0")
CELERY_RESULT_BACKEND = os.environ.get("REDIS_PATH", "redis://127.0.0.1:6379/0")

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": CELERY_REDIS_LOCATION,
        "OPTIONS": {
            "DB": REDIS_DB,
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PICKLE_VERSION": -1,
            "IGNORE_EXCEPTIONS": True,
            "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
            'CONNECTION_POOL_CLASS': 'redis.BlockingConnectionPool',
            'CONNECTION_POOL_CLASS_KWARGS': {
                'max_connections': 150,
                'timeout': 3600,
            },
            'COMPRESSOR_CLASS': 'redis_cache.compressors.ZLibCompressor',
            'COMPRESSOR_CLASS_KWARGS': {
                'level': 5,
            },
        }
    }
}


CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Zagreb'

CACHE_TTL = 60 * 15

# CORS
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
)

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)

# Logger

USE_X_FORWARDED_HOST = True

# Rest framework
REST_FRAMEWORK = {
    'DATE_INPUT_FORMATS': ["%d-%m-%Y", "%Y-%m-%d", "%d.%m.%Y", "%Y-%d-%m"],
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.AllowAny',
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_MODEL_SERIALIZER_CLASS': (
        'rest_framework.serializers.ModelSerializer',
    ),
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '100/day'
    },
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    )
}

# JWT Session support

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(seconds=30000),
    "REFRESH_TOKEN_LIFETIME": datetime.timedelta(minutes=30),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
    "JWT_AUTH_HEADER_PREFIX": "tempname",

    "ALGORITHM": "HS512",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("tempname",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",

    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",
}


SWAGGER_SETTINGS = {
    'JSON_EDITOR': True,
    'DOC_EXPANSION': 'list',
    'APIS_SORTER': 'alpha',
    'USE_SESSION_AUTH': True,
    'SECURITY_DEFINITIONS': {
        "Authen": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    'SUPPORTED_SUBMIT_METHODS': [
        'get',
        'post',
        'put',
        'patch',
        'delete'
    ],
    'SHOW_REQUEST_HEADERS': True,

}

from .logger import *

SITE_ID = 1

if os.environ.get("SENTRY", None):
    from sentry_sdk.integrations.logging import ignore_logger
    ignore_logger("django.security.DisallowedHost")

    # Sentry
    sentry_sdk.init(
        dsn=os.environ.get("SENTRY", ""),
        integrations=[DjangoIntegration(), RedisIntegration()],
        traces_sample_rate=1.0,
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True
    )

# Social
PRIMARY_DOMAIN = os.environ.get("PRIMARY_DOMAIN", "")
GOOGLE_CLIENT_ID = os.environ.get("GOOGLE_CLIENT_ID", "")
GOOGLE_SECRET = os.environ.get("GOOGLE_SECRET", "")
GOOGLE_REDIRECT_URI = PRIMARY_DOMAIN + 'home'
FACEBOOK_CLIENT_ID = os.environ.get("FACEBOOK_CLIENT_ID", "")

# Channels

ASGI_APPLICATION = 'app.routing.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('{}'.format(os.environ.get("REDIS_HOST", "redis")), 6379)],
            "capacity": 10000,
            "expiry": 10,
        },
    },
}

# SAP credentials
SAP_COMMUNICATION = os.environ.get("SAP_COMMUNICATION")

SAP_DATABASE = os.environ.get("SAP_DATABASE")
SAP_USERNAME = os.environ.get("SAP_USERNAME")
SAP_PASSWORD = os.environ.get("SAP_PASSWORD")
SAP_LOGIN_URL = os.environ.get("SAP_LOGIN_URL")
SAP_WAREHOUSE_STATE_URL = os.environ.get("SAP_WAREHOUSE_STATE_URL")
SAP_WAREHOUSE_URL = os.environ.get('SAP_WAREHOUSE_URL')
SAP_REQUEST_ORDER_URL = os.environ.get("SAP_REQUEST_ORDER_URL")
SAP_BATCH_URL = os.environ.get("SAP_BATCH_URL")
SAP_CLIENTS_URL = os.environ.get("SAP_CLIENTS_URL")
SAP_QUOTES_URL = os.environ.get("SAP_QUOTES_URL")
SAP_BUILDING_SITES_URL = os.environ.get("SAP_BUILDING_SITES_URL")
SAP_USEFUL_WASTE = os.environ.get("SAP_USEFUL_WASTE")
SAP_ITEMS_URL = os.environ.get("SAP_ITEMS_URL")
SAP_DISPATCH_NOTES = os.environ.get("SAP_DISPATCH_NOTES")
SAP_DISPATCH_NOTES2 = os.environ.get("SAP_DISPATCH_NOTES2")

# Warehouse Application credentials
WAREHOUSE_INTEGRATION_USERNAME=os.environ.get("WAREHOUSE_INTEGRATION_USERNAME")
WAREHOUSE_INTEGRATION_PASSWORD=os.environ.get("WAREHOUSE_INTEGRATION_PASSWORD")
WAREHOUSE_INTEGRATION_DISPATCH_NOTES_URL=os.environ.get("WAREHOUSE_INTEGRATION_DISPATCH_NOTES_URL")
WAREHOUSE_INTEGRATION_DELIVERY_NOTES_URL=os.environ.get("WAREHOUSE_INTEGRATION_DELIVERY_NOTES_URL")
WAREHOUSE_INTEGRATION_TAG_CHECK_URL=os.environ.get("WAREHOUSE_INTEGRATION_TAG_CHECK_URL")
WAREHOUSE_INTEGRATION_ASSING_TO_MACHINE_URL=os.environ.get("WAREHOUSE_INTEGRATION_ASSING_TO_MACHINE_URL")
WAREHOUSE_INTEGRATION_DEPLETED_FROM_MACHINE_URL=os.environ.get("WAREHOUSE_INTEGRATION_DEPLETED_FROM_MACHINE_URL")

# EMAIL credentials
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_PORT = os.environ.get('EMAIL_PORT')
EMAIL_TLS = os.environ.get('EMAIL_TLS')
EMAIL_USERNAME = os.environ.get('EMAIL_USERNAME')
EMAIL_PASSWORD = os.environ.get('EMAIL_PASSWORD')
EMAIL_FROM = os.environ.get('EMAIL_FROM')